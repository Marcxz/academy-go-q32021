// Code generated by MockGen. DO NOT EDIT.
// Source: csv_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ReadCSVFile mocks base method.
func (m *MockReader) ReadCSVFile() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCSVFile")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCSVFile indicates an expected call of ReadCSVFile.
func (mr *MockReaderMockRecorder) ReadCSVFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCSVFile", reflect.TypeOf((*MockReader)(nil).ReadCSVFile))
}

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// StoreAddressCSV mocks base method.
func (m *MockStorer) StoreAddressCSV(id int, a string, lat, lng float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAddressCSV", id, a, lat, lng)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAddressCSV indicates an expected call of StoreAddressCSV.
func (mr *MockStorerMockRecorder) StoreAddressCSV(id, a, lat, lng interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAddressCSV", reflect.TypeOf((*MockStorer)(nil).StoreAddressCSV), id, a, lat, lng)
}

// MockCsv is a mock of Csv interface.
type MockCsv struct {
	ctrl     *gomock.Controller
	recorder *MockCsvMockRecorder
}

// MockCsvMockRecorder is the mock recorder for MockCsv.
type MockCsvMockRecorder struct {
	mock *MockCsv
}

// NewMockCsv creates a new mock instance.
func NewMockCsv(ctrl *gomock.Controller) *MockCsv {
	mock := &MockCsv{ctrl: ctrl}
	mock.recorder = &MockCsvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCsv) EXPECT() *MockCsvMockRecorder {
	return m.recorder
}

// ReadCSVFile mocks base method.
func (m *MockCsv) ReadCSVFile() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCSVFile")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCSVFile indicates an expected call of ReadCSVFile.
func (mr *MockCsvMockRecorder) ReadCSVFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCSVFile", reflect.TypeOf((*MockCsv)(nil).ReadCSVFile))
}

// StoreAddressCSV mocks base method.
func (m *MockCsv) StoreAddressCSV(id int, a string, lat, lng float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAddressCSV", id, a, lat, lng)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAddressCSV indicates an expected call of StoreAddressCSV.
func (mr *MockCsvMockRecorder) StoreAddressCSV(id, a, lat, lng interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAddressCSV", reflect.TypeOf((*MockCsv)(nil).StoreAddressCSV), id, a, lat, lng)
}
