// Code generated by MockGen. DO NOT EDIT.
// Source: address_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/Marcxz/academy-go-q32021/models"
	gomock "github.com/golang/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ReadCSVAddress mocks base method.
func (m *MockReader) ReadCSVAddress(arg0 string) ([]models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCSVAddress", arg0)
	ret0, _ := ret[0].([]models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCSVAddress indicates an expected call of ReadCSVAddress.
func (mr *MockReaderMockRecorder) ReadCSVAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCSVAddress", reflect.TypeOf((*MockReader)(nil).ReadCSVAddress), arg0)
}

// MockGeolocater is a mock of Geolocater interface.
type MockGeolocater struct {
	ctrl     *gomock.Controller
	recorder *MockGeolocaterMockRecorder
}

// MockGeolocaterMockRecorder is the mock recorder for MockGeolocater.
type MockGeolocaterMockRecorder struct {
	mock *MockGeolocater
}

// NewMockGeolocater creates a new mock instance.
func NewMockGeolocater(ctrl *gomock.Controller) *MockGeolocater {
	mock := &MockGeolocater{ctrl: ctrl}
	mock.recorder = &MockGeolocaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeolocater) EXPECT() *MockGeolocaterMockRecorder {
	return m.recorder
}

// GeocodeAddress mocks base method.
func (m *MockGeolocater) GeocodeAddress(arg0 string) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeocodeAddress", arg0)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeocodeAddress indicates an expected call of GeocodeAddress.
func (mr *MockGeolocaterMockRecorder) GeocodeAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeocodeAddress", reflect.TypeOf((*MockGeolocater)(nil).GeocodeAddress), arg0)
}

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// StoreGeocodeAddress mocks base method.
func (m *MockStorer) StoreGeocodeAddress(arg0 string) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreGeocodeAddress", arg0)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreGeocodeAddress indicates an expected call of StoreGeocodeAddress.
func (mr *MockStorerMockRecorder) StoreGeocodeAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreGeocodeAddress", reflect.TypeOf((*MockStorer)(nil).StoreGeocodeAddress), arg0)
}

// MockAddress is a mock of Address interface.
type MockAddress struct {
	ctrl     *gomock.Controller
	recorder *MockAddressMockRecorder
}

// MockAddressMockRecorder is the mock recorder for MockAddress.
type MockAddressMockRecorder struct {
	mock *MockAddress
}

// NewMockAddress creates a new mock instance.
func NewMockAddress(ctrl *gomock.Controller) *MockAddress {
	mock := &MockAddress{ctrl: ctrl}
	mock.recorder = &MockAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddress) EXPECT() *MockAddressMockRecorder {
	return m.recorder
}

// GeocodeAddress mocks base method.
func (m *MockAddress) GeocodeAddress(arg0 string) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeocodeAddress", arg0)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeocodeAddress indicates an expected call of GeocodeAddress.
func (mr *MockAddressMockRecorder) GeocodeAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeocodeAddress", reflect.TypeOf((*MockAddress)(nil).GeocodeAddress), arg0)
}

// ReadCSVAddress mocks base method.
func (m *MockAddress) ReadCSVAddress(arg0 string) ([]models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCSVAddress", arg0)
	ret0, _ := ret[0].([]models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCSVAddress indicates an expected call of ReadCSVAddress.
func (mr *MockAddressMockRecorder) ReadCSVAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCSVAddress", reflect.TypeOf((*MockAddress)(nil).ReadCSVAddress), arg0)
}

// StoreGeocodeAddress mocks base method.
func (m *MockAddress) StoreGeocodeAddress(arg0 string) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreGeocodeAddress", arg0)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreGeocodeAddress indicates an expected call of StoreGeocodeAddress.
func (mr *MockAddressMockRecorder) StoreGeocodeAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreGeocodeAddress", reflect.TypeOf((*MockAddress)(nil).StoreGeocodeAddress), arg0)
}
